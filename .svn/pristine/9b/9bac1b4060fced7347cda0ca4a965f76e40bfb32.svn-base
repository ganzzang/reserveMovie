package com.cinema.web.movie.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cinema.web.common.bean.PagingBean;
import com.cinema.web.common.constant.CommonConst;
import com.cinema.web.member.bean.MemberBean;
import com.cinema.web.movie.bean.MovieBean;
import com.cinema.web.movie.bean.SeatBean;
import com.cinema.web.movie.service.MovieService;
@Controller
public class MovieController {

		@Autowired MovieService movieService;
		@RequestMapping("/admin/insertMovieProc")
		@ResponseBody
		public Map<String, Object> insertMovieProc(MovieBean movieBean){
			Map<String, Object> map = new HashMap<String, Object>();
			String result = CommonConst.RESULT_FAIL;
			String resultMsg = "영화 등록에 실패 하였습니다.";
			try{
				/* version 68
				int rtnVal = movieService.insertMovie(movieBean);
				int cnt = 0;
				for(int i = 0; i < movieBean.getSeatCntX(); ++i){
					for(int j = 0; j < movieBean.getSeatCntY(); ++j){
						SeatBean seatBean = new SeatBean( ++cnt , "N", movieBean.getCode());
						movieService.insertSeat(seatBean);
					}
				}*/
				int rtnVal = movieService.insertMovie(movieBean);
				//성공
				if(rtnVal>0){
					result = CommonConst.RESULT_OK;
					resultMsg = "영화를 등록하였습니다.";
				}
			}catch(Exception e){
				e.printStackTrace();
			}
			map.put(CommonConst.RESULT, result);
			map.put(CommonConst.RESULT_MSG, resultMsg);
			return map;
		}
		
	// insertHallSeat : 영화관 좌석 등록
		@RequestMapping("/admin/insertHallSeat")
		@ResponseBody
		public Map<String, Object> insertHallSeat(SeatBean seatBean, MovieBean movieBean){
			Map<String, Object> map = new HashMap<String, Object>();
			String result = CommonConst.RESULT_FAIL;
			String resultMsg = "영화관 좌석 등록에 실패 하였습니다.";
			try{
				int rtnVal = 0;
				int i = 0;
				System.out.println(movieBean.getHall());
				if( movieBean.getHall().equals("A") ){
					for( i=1; i<=100 ; i++){
						seatBean.setSeatNo(i);
						rtnVal = movieService.insertHallSeat(seatBean);
					}
				}
				else if( movieBean.getHall().equals("B")){
					for( i=1; i<=70 ; i++){
						seatBean.setSeatNo(i);
						rtnVal = movieService.insertHallSeat(seatBean);
					}
				}
				else if( movieBean.getHall().equals("C")){
					for( i=1; i<=50 ; i++){
						seatBean.setSeatNo(i);
						rtnVal = movieService.insertHallSeat(seatBean);
					}
				}
				else {
					resultMsg = "영화관을 선택해주세요.";
				}
				//성공
				if(rtnVal>0){
					result = CommonConst.RESULT_OK;
					resultMsg = "영화관 좌석을 등록하였습니다.";
				}
			}catch(Exception e){
				e.printStackTrace();
			}
			map.put(CommonConst.RESULT, result);
			map.put(CommonConst.RESULT_MSG, resultMsg);
			return map;
		}
		
	// updateMovie : 영화수정
	
	// deleteMovie : 영화삭제
	
	// selectMovieList : 영화리스트
	@RequestMapping("/movie/selectMovieList")
	@ResponseBody
	public Map<String, Object> selectMovieList(MovieBean mBean, PagingBean pagingBean, Model model){
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		String result = CommonConst.RESULT_FAIL;
		String resultMsg = "영화 리스트 조회를 실패 하였습니다.";
		
		try {
			//전체 리스트 갯수
			int totCount = movieService.selectListTotCount(pagingBean);
			
			pagingBean.calcPage(totCount);
			
			//리스트 데이터
			List<MovieBean> list = movieService.selectMovieList(pagingBean);
			
			for(int i = 0; i < list.size(); ++i){
				MovieBean tmpBean = list.get(i);
				System.out.println(tmpBean.getCode());
				int totSeatCount = movieService.selectTotalSeatCount(list.get(i));
				int revSeatCount = movieService.selectRevSeatCount(list.get(i));
				
				list.get(i).setTotSeat(totSeatCount);
				list.get(i).setRevSeat(revSeatCount);
			}
			
			result = CommonConst.RESULT_OK;
			resultMsg = "회원 리스트 조회에 성공 하였습니다.";
			
			map.put("pagingBean", pagingBean);
			map.put("movieList", list);

		} catch(Exception e) {
			e.printStackTrace();
		}
		
		map.put(CommonConst.RESULT, result);
		map.put(CommonConst.RESULT_MSG, resultMsg);
		
		return map;
	}
	
	@RequestMapping("/movie/selectMovie")
	public String selectMovie(MovieBean movieBean, PagingBean pagingBean, HttpSession session){
		System.out.println(movieBean.getCode());
		
		//영화 선택시, 그 영화에 관한 정보를 session에 담아둔다. (rev테이블 채워야 해서)
		MovieBean mBean = movieService.selectMovie(movieBean);
		
		if(mBean != null) {
			System.out.println( movieBean.getCode());
		} 

		//실어 나른다.
		session.setAttribute(CommonConst.SEAT_MOIVE_BEAN, mBean);
		
		return "redirect:/member/reserveMovie.do";
	}
	
	// 영화정보 수정화면 출력
	@RequestMapping("/admin/updateMovie")
	public String updateMovie(MovieBean movieBean,Model model) {
		//클릭한 영화코드에 해당하는 영화정보 저장
		MovieBean mvBean = movieService.selectMovie(movieBean); 
		
		if(mvBean != null) 	{
		
		System.out.println( mvBean.getTitleKor());
		System.out.println( mvBean.getTitleEng());
		// 지워도 작동되는지 확인
	} 

		model.addAttribute("movieBean", mvBean);

		return "/admin/updateMovie";
	}
	
	// 영화 수정정보 입력
	@RequestMapping("/admin/updateMovieProc.do")
	public String updateMovieProc(MovieBean movieBean, Model model){
		
		String opTime = movieBean.getOpTimeMonth() + '-' + 
						movieBean.getOpTimeDay() + ' ' +
						movieBean.getOpTimeHh()  + ':' +
						movieBean.getOpTimeMi();
		
		String edTime = movieBean.getEdTimeMonth() + '-' + 
						movieBean.getEdTimeDay() + ' ' +
						movieBean.getEdTimeHh()  + ':' +
						movieBean.getEdTimeMi();

		movieBean.setOpTime(opTime);
		movieBean.setEdTime(edTime);
		
		//  null 방지용
		movieBean.setPath("test");
		
		int intMovie = movieService.updateMovie(movieBean);
		
		if(intMovie > 0){
			return "redirect:/admin/adminIndex.do";
		}
		
		return "/admin/updateMovie.do";
	}
	
	// addHall : 영화관추가 
	
	// deleteHall : 영화관 삭제
/*version 68
	@RequestMapping("/member/deleteHall")
	public String deleteHall(MovieBean movieBean, SeatBean seatBean, Model model, HttpSession session){
		
		// 영화가 여러개 체크될때를 대비해 좀더 수정이 필요할듯함 ...
		
		seatBean.setCode(movieBean.getCode());
		
		int movieVal =  movieService.deleteMovie(movieBean);
		int seatVal = movieService.deleteSeat(seatBean);
		
		if(movieVal > 0 && seatVal > 0) {
			return "redirect:/movie/adminIndex.do";
		}
		model.addAttribute("result", "fail");
		model.addAttribute("resultMsg", "회원정보 삭제에 실패 하였습니다.");
		
		return "redirect:/movie/adminIndex.do";
	}	
}
*/

}
